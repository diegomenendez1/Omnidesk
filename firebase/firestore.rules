import { getFirestore, collection, addDoc, serverTimestamp } from 'firebase/firestore';
import { initializeApp } from 'firebase/app';

// Your web app's Firebase configuration
const firebaseConfig = {
  // ... your firebase config details
};

// Initialize Firebase
const app = initializeApp(firebaseConfig);
const db = getFirestore(app);

interface Task {
  id: string;
  referenceId: string;
  title: string;
  description?: string;
  status: string;
  priority?: string;
  progress?: number;
  tags?: string[];
  comments?: { userId: string; timestamp: Date; text: string }[];
  attachments?: { name: string; url: string }[];
  historyLog?: { userId: string; timestamp: Date; action: string; changes: any }[];
  createdBy: string;
  assignedTo: string;
  createdAt: Date;
  updatedAt: Date;
  dueDate?: Date;
}

const createTask = async (taskData: Omit<Task, 'id' | 'createdAt' | 'updatedAt'>) => {
  try {
    const docRef = await addDoc(collection(db, 'tasks'), {
      ...taskData,
      createdAt: serverTimestamp(),
      updatedAt: serverTimestamp(),
      // Firestore will automatically generate the document ID.
      // We can retrieve it after adding the document if needed.
    });
    console.log('Task created with ID: ', docRef.id);
    return docRef.id;
  } catch (e) {
    console.error('Error adding document: ', e);
    throw e;
  }
};

// Example usage (you would call this function with actual task data):
/*
createTask({
  referenceId: 'TASK-001',
  title: 'Complete project proposal',
  description: 'Write and finalize the proposal document for the new project.',
  status: 'Open',
  priority: 'High',
  progress: 10,
  tags: ['project', 'documentation'],
  createdBy: 'user123',
  assignedTo: 'user456',
  dueDate: new Date('2023-10-26'),
});
*/